library(ggrepel)
my_image <- readPNG("happy_productive_blank.png")
#fixing date
pulse_check <- pulse_check %>%
mutate(month_day = format(Date, format='%m-%d'))
ggplot(pulse_check %>%  filter(Date  >= today() - weeks(3)))+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName),size = 1.5)+
background_image(my_image)+
#repeat line or tosses an error
#geom_label(aes(x=Q3_1_x,y=Q3_1_y, label=month_day), size = 1.5, nudge_y = 25)+
geom_label_repel(aes(x=Q3_1_x,y=Q3_1_y,label = month_day), size = 1.5)+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName), size = 1.5) +
labs(title='Happiness & Productivity',
y='Productive',
x='Happy',
color='Name')+
theme(axis.text.x = element_blank())+
scale_fill_brewer(palette="Accent")
library(jpeg)
library(png)
library(ggpubr)
library(ggrepel)
my_image <- readPNG("happy_productive_blank.png")
#fixing date
pulse_check <- pulse_check %>%
mutate(month_day = format(Date, format='%m-%d'))
ggplot(pulse_check %>%  filter(Date  >= today() - weeks(3)))+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName),size = 1.5)+
background_image(my_image)+
#repeat line or tosses an error
#geom_label(aes(x=Q3_1_x,y=Q3_1_y, label=month_day), size = 1.5, nudge_y = 25)+
geom_label_repel(aes(x=Q3_1_x,y=Q3_1_y,label = month_day), size = 1.5)+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName), size = 1.5) +
labs(title='Happiness & Productivity',
y='Productive',
x='Happy',
color='Name')+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())+
scale_fill_brewer(palette="Accent")
library(jpeg)
library(png)
library(ggpubr)
library(ggrepel)
my_image <- readPNG("happy_productive_blank.png")
#fixing date
pulse_check <- pulse_check %>%
mutate(month_day = format(Date, format='%m-%d'))
ggplot(pulse_check %>%  filter(Date  >= today() - weeks(3)))+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName),size = 1.5)+
background_image(my_image)+
#repeat line or tosses an error
#geom_label(aes(x=Q3_1_x,y=Q3_1_y, label=month_day), size = 1.5, nudge_y = 25)+
geom_label_repel(aes(x=Q3_1_x,y=Q3_1_y,label = month_day), size = 1.5)+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName), size = 1.5) +
geom_smooth(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName), size = .5) +
labs(title='Happiness & Productivity',
y='Productive',
x='Happy',
color='Name')+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())+
scale_fill_brewer(palette="Accent")
library(jpeg)
library(png)
library(ggpubr)
library(ggrepel)
my_image <- readPNG("happy_productive_blank.png")
#fixing date
pulse_check <- pulse_check %>%
mutate(month_day = format(Date, format='%m-%d'))
ggplot(pulse_check %>%  filter(Date  >= today() - weeks(3)))+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName),size = 1.5)+
background_image(my_image)+
#repeat line or tosses an error
#geom_label(aes(x=Q3_1_x,y=Q3_1_y, label=month_day), size = 1.5, nudge_y = 25)+
geom_label_repel(aes(x=Q3_1_x,y=Q3_1_y,label = month_day), size = 1.5)+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName), size = 1.5) +
geom_line(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName), size = .5) +
labs(title='Happiness & Productivity',
y='Productive',
x='Happy',
color='Name')+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())+
scale_fill_brewer(palette="Accent")
library(jpeg)
library(png)
library(ggpubr)
library(ggrepel)
my_image <- readPNG("happy_productive_blank.png")
#fixing date
pulse_check <- pulse_check %>%
mutate(month_day = format(Date, format='%m-%d'))
ggplot(pulse_check %>%  filter(Date  >= today() - weeks(3)))+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName),size = 1.5)+
background_image(my_image)+
#repeat line or tosses an error
#geom_label(aes(x=Q3_1_x,y=Q3_1_y, label=month_day), size = 1.5, nudge_y = 25)+
geom_point(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName), size = 1.5) +
geom_line(aes(x=Q3_1_x,y=Q3_1_y, color=RecipientLastName), size = .5) +
geom_label_repel(aes(x=Q3_1_x,y=Q3_1_y,label = month_day), size = 1.5)+
labs(title='Happiness & Productivity',
y='Productive',
x='Happy',
color='Name')+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())+
scale_fill_brewer(palette="Accent")
broom::tidy(power.t.test(power=0.8, delta = .02))
broom::tidy(power.t.test(power=0.9, delta = .02))
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(power =p,sd_effect){
broom::tidy(power.t.test(power=p, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=p, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(power =p,sd_effect){
broom::tidy(power.t.test(power=p, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=p, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(pow, sd_effect){
broom::tidy(power.t.test(power=pow, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=0.9, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, pow)
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(pow, sd_effect=deltas){
broom::tidy(power.t.test(power=pow, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=0.9, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, pow)
#the numbers included are based on the lit review
#0.05 is included as this is the number we are ultimately basing out calculation off of.
deltas = c(0.02, 0.03,0.05, 0.08, 0.10, 0.11, 0.15, 0.16, 0.21, 0.22)
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(sd_effect){
broom::tidy(power.t.test(power=0.8, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=0.9, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
#outputting numbers
tab_power_calc_2 = power_calc %>%
spread(power, n)
tab_power_calc_2
power = .8
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(power, deltas, function(pow, sd_effect){
broom::tidy(power.t.test(power=pow, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=pow, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
#the numbers included are based on the lit review
#0.05 is included as this is the number we are ultimately basing out calculation off of.
deltas = c(0.02, 0.03,0.05, 0.08, 0.10, 0.11, 0.15, 0.16, 0.21, 0.22)
power = .8
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(power, deltas, function(pow, sd_effect){
broom::tidy(power.t.test(power=pow, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=pow, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
pow = .8
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(pow, sd_effect){
broom::tidy(power.t.test(power=pow, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=pow, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(sd_effect){
broom::tidy(power.t.test(power=pow, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=pow, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
#outputting numbers
tab_power_calc_2 = power_calc %>%
spread(power, n)
broom::tidy(power.t.test(power=.8, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=.8, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
#the numbers included are based on the lit review
#0.05 is included as this is the number we are ultimately basing out calculation off of.
deltas = c(0.02, 0.03,0.05, 0.08, 0.10, 0.11, 0.15, 0.16, 0.21, 0.22)
pow = .8
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(sd_effect){
broom::tidy(power.t.test(power=.8, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=.8, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
#outputting numbers
tab_power_calc_2 = power_calc %>%
spread(power, n)
#the numbers included are based on the lit review
#0.05 is included as this is the number we are ultimately basing out calculation off of.
deltas = c(0.02, 0.03,0.05, 0.08, 0.10, 0.11, 0.15, 0.16, 0.21, 0.22)
#running the power calc for each delta, SD normalized to 1
power_calc = lapply(deltas, function(sd_effect){
broom::tidy(power.t.test(power=0.8, delta = sd_effect)) %>%
bind_rows(broom::tidy(power.t.test(power=0.9, delta = sd_effect))) %>%
mutate(pct_change = sd_effect)
}) %>% bind_rows() %>%
select(pct_change, everything()) %>%
arrange(pct_change, power)
#outputting numbers
tab_power_calc_2 = power_calc %>%
spread(power, n)
tab_power_calc_2
TukeyHSD(mod1)
View(gm)
#install.packages("emmeans")
library(emmeans)
emmeans(mod1, ~group_f)
emmeans(mod1, ~group_f) %>% pairs()
gm %>%
group_by(group_f) %>%
summarise(mean = mean(gpa), sd = sd(gpa))
emmeans_anova <- emmeans(mod1, ~group_f) %>% as.tibble()
emmeans_anova
emmeans_anova <- emmeans(mod1, ~group_f) %>% as.dataframe()
emmeans_anova <- emmeans(mod1, ~group_f) %>% as.DataFrame()
emmeans_anova <- emmeans(mod1, ~group_f) %>% as.Datatable()
emmeans_anova <- emmeans(mod1, ~group_f) %>% as.datatable()
emmeans_anova <- emmeans(mod1, ~group_f) %>% as.data.frame()
?as.data
emmeans_anova
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f)) +
geom_col()
emmeans_anova <- emmeans(mod1, ~group_f) %>% as.tibble()
emmeans_anova
#This commented out code also works with a data frame!
emmeans_anova <- emmeans(mod1, ~group_f) %>% as.data.frame()
emmeans_anova
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f)) +
geom_col()
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col()
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col() +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = .3)
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col() +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = .3) +
ylab("GPA") +
coord_cartesian(ylim = c(50, 95))
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col() +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = .3) +
ylab("GPA") +
coord_cartesian(ylim = c(70, 95))
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col() +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = .3) +
ylab("GPA") +
coord_cartesian(ylim = c(70, 90))
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col() +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = .3) +
ylab("GPA") +
coord_cartesian(ylim = c(75, 90))
mod2 <- gm %$% aov(gpa ~ group_f + gender_f + age)
summary(mod2)
fit2 <- gm %$% lm(gpa ~ group_f + gender_f + age)
anova(fit2)
emmeans(mod2, ~group_f) %>% pairs()
emmeans_anova2 <- emmeans(mod2, ~group_f) %>% as.tibble()
emmeans_anova2 %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col() +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = .3) +
ylab("GPA") +
coord_cartesian(ylim = c(50, 95))
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col() +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = .3) +
labs(title= "ANOVA (no controls)",
y="GPA") +
coord_cartesian(ylim = c(75, 90))
emmeans_anova2 %>%
ggplot(aes(y = emmean, x = group_f, fill = group_f)) +
geom_col() +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = .3) +
labs(title= "ANCOVA (with controls)",
y="GPA") +
coord_cartesian(ylim = c(75, 90))
exhibit.b = exp(rnorm(20))
exhibit.b %>% rank() #Here are the ranks
exhibit.b %>% rank() %>% hist #Since every rank is likely to ocurr once (ties can ocurr, but they are not usual), the extremeness of the data is solved.
fit = mtcars %$% wilcox.test(mpg ~ am)
fit
ChickWeight %>%
spread(Time,weight) %>%
filter(Diet ==1) %$%
wilcox.test(`20`,`21`,paired = T)
ChickWieght
library(help = "datasets")
?ChickWeight
ChickWeight
ChickWeight %>%
spread(Time,weight) %>%
filter(Diet ==1) %$%
wilcox.test(`20`,`21`,paired = T)
ChickWeight %>%
spread(Time,weight)
ChickWeight
ChickWeight %>%
filter(Diet ==1) %$%
wilcox.test(`20`,`21`,paired = T)
ChickWeight %>%
spread(Time,weight)
class(ChickWeight$weight)
ChickWeight %>%
spread(Time,weight) %>%
filter(Diet ==1 & (Time == 20 || Time == 21))
ChickWeight %>%
filter(Diet ==1 & (Time == 20 || Time == 21))
ChickWeight %>%
filter((Time == 20 || Time == 21))
ChickWeight %>%
filter((Time == 20))
ChickWeight %>%
filter((Time == 21))
ChickWeight %>%
filter((Time == 20 | Time == 21))
ChickWeight %>%
filter(Diet ==1 & (Time == 20 | Time == 21))
ChickWeight %>%
filter(Diet ==1 & (Time == 20 || Time == 21)) %$%
wilcox.test(`20`,`21`,paired = T)
ChickWeight %>%
spread(Time,weight)
ChickWeight %>%
spread(Time,weight, drop == TRUE)
ChickWeight %>%
spread(Time)
spread(ChickWeight$Time)
spread(ChickWeight$Weight)
spread(as.factor(ChickWeight$Time))
pivot_longer(ChickWeight$Time)
pivot_wider(ChickWeight$Time)
pivot_wider(ChickWeight$Weight)
pivot_wider(ChickWeight$Weight,ChickWeight$Time)
pivot_wider(ChickWeight$Time, ChickWeight$Weight)
pivot_longer(ChickWeight$Time, ChickWeight$Weight)
ChickWeight$Weight
?sp
?sp
ChickWeight
pivot_longer(ChickWeight$Time, ChickWeight$weight)
pivot_shorter(ChickWeight$Time, ChickWeight$weight)
pivot_wider(ChickWeight$Time, ChickWeight$weight)
ChickWeight %>%
pivot_wider(names_from = Time, values_from = weight, values_fill = 0)
ChickWeight %>%
pivot_wider(names_from = Time, values_from = weight)
ChickWeight %>%
pivot_wider(names_from = weight, values_from = Time)
ChickWeight %>%
pivot_longer(names_from = weight, values_from = Time)
as.tibble(ChickWeight)
as.tibble(ChickWeight) %>%
spread(Time, weight)
as.tibble(ChickWeight) %>%
spread(Time, weight) %>%
filter(Diet ==1) %$%
wilcox.test(`20`,`21`,paired = T)
What about paired samples? We just need to specify that the samples are paired with the `paired = TRUE` argument. Let's look at how chickens grow (I wonder where does R get these weird datasets). We need to do some data manipulation, as the function takes as input two vectors of data from the same subjects. To make the sample smaller, also, let's look only at those with experimental diet # 1. `as.tibble(ChickWeight)`
`as.tibble(ChickWeight)`
`as.tibble(ChickWeight)`
`as.tibble(ChickWeight)`
as.tibble(ChickWeight)
`as.tibble(ChickWeight)`
`as.tibble(ChickWeight)`
hello `as.tibble(ChickWeight)`
hello `as.tibble(ChickWeight)`
hello `as.tibble(ChickWeight)`
hello `as.tibble(ChickWeight)`
as.tibble(ChickWeight)
as.tibble(ChickWeight) %>%
spread(Time, weight) %>%
filter(Diet ==1) %$%
wilcox.test(`20`,`21`,paired = T)
as.tibble(ChickWeight)
table(as.tibble(ChickWeight))
table(as.tibble(ChickWeight$Diet))
table(as.tibble(ChickWeight$Time))
ChickWeight <- as.tibble(ChickWeight)
view(ChickWeight)
ChickWeight %>%
spread(Time, weight) %>%
filter(Diet ==1) %$%
wilcox.test(`10`,`11`,paired = T)
ChickWeight %>%
spread(Time, weight) #%>%
filter(Diet ==1) %$%
# wilcox.test(`10`,`11`,paired = T)
ChickWeight %>%
spread(Time, weight) #%>%
filter(Diet ==1) #%$%
ChickWeight %>%
spread(Time, weight) #%>%
#filter(Diet ==1) #%$%
# wilcox.test(`10`,`11`,paired = T)
ChickWeight %>%
spread(Time, weight) #%>%
filter(Diet == '1') #%$%
ChickWeight %>%
spread(Time, weight) %>%
filter(Diet == 1) #%$%
# wilcox.test(`10`,`11`,paired = T)
ChickWeight %>%
spread(Time, weight) %>%
filter(Diet == 1) %$%
wilcox.test(`10`,`12`,paired = T)
ChickWeight %>%
spread(Time, weight) %>%
filter(Diet == 1) %$%
wilcox.test(`10`,`12`,`14`,paired = T)
ChickWeight %>%
spread(Time, weight) %>%
filter(Diet == 1) %$%
wilcox.test(`10`,,`14`,paired = T)
ChickWeight %>%
spread(Time, weight) %>%
filter(Diet == 1) %$%
wilcox.test(`10`,`14`,paired = T)
?wilcox.test
fit = mtcars %$% kruskal.test(mpg ~ cyl)
fit
fit_kru <- mtcars %$% kruskal.test(mpg ~ cyl)
fit_kru
table(mtcars$cyl)
fit_kru <- mtcars %$% kruskal.test(mpg ~ cyl)
fit_kru
library(tidyverse) # For dplyr, ggplot2, etc.
library(magrittr) # for pipes
mtcars <- mtcars
library(psych)
mtcars %>%
select(mpg) %>%
describe()
single.samp.d <- (mean(mtcars$mpg) - 30)/sd(mtcars$mpg)
abs(single.samp.d)
View(mtcars)
mtcars %>%
select(disp) %>%
describe()
mtcars %$% t.test(x = disp, mu = 230)
mtcars %$% t.test(x = disp, mu = 250)
mtcars %$% t.test(x = disp, mu = 260)
mtcars %$% t.test(x = disp, mu = 270)
mtcars %$% t.test(x = disp, mu = 260)
table(mtcars)
view(mtcars)
table(mtcars$vs)
mtcars %$% t.test(disp ~ vs)
mt_paired <- read.csv("mtcars.paired.csv", header = TRUE)
view(mt_paired)
gm <- read.csv("growth mindset study_cleaned.csv")
gm %<>% mutate(
group_f = factor(group_f),
school_f = factor(school_f),
gender_f = factor(gender_f)
)
view(gm)
View(gm)
#practice anova here with any syntax you like!
anova(lm(gpa ~ gender_f,data = gm))
emmeans_anova %>%
ggplot(aes(y = emmean, x = group_f)) +
geom_col()
