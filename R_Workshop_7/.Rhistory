usedata('nlsy')
?usedata
JOBS
jobs
?jobs
data(jobs)
data(jobs)
library(mediation)
data(jobs)
library(mediation)
install.packages("mediation")
#install.packages("mediation")
library(mediation)
data(jobs)
jobw
jobs
?jobs
#install.packages("mediation")
library(mediation)
data(jobs)
jobs %<>% select()
data(jobs)
data(jobs)
library(magrittr)
library(tidyverse)
#install.packages("mediation")
library(mediation)
data(jobs)
jobs
jobs %<>% select(job_seek,treat,depress2)
b <- lm(job_seek ~ treat, data=jobs)
c <- lm(depress2 ~ treat + job_seek, data=jobs)
jobs
jobs %<>% select(treat,job_seek,depress2) #On
jobs
contcont <- mediate(b, c, sims=50, treat="treat", mediator="job_seek")
summary(contcont)
plot(contcont)
contcont <- mediate(b, c, sims=50, treat="treat", mediator="job_seek")
?mediate
contcont <- mediate(b, c, sims=1000, boot = T,treat="treat", mediator="job_seek")
summary(contcont)
plot(contcont)
summary(contcont)
summary(contcont)
plot(contcont)
b <- lm(job_seek ~ treat + econ_hard + sex + age, data=jobs)
c <- lm(depress2 ~ treat + job_seek + econ_hard + sex + age, data=jobs)
jobs
data(jobs)
b <- lm(job_seek ~ treat + econ_hard + sex + age, data=jobs)
c <- lm(depress2 ~ treat + job_seek + econ_hard + sex + age, data=jobs)
# Estimation via quasi-Bayesian approximation
contcont <- mediate(b, c, sims=50, treat="treat", mediator="job_seek")
summary(contcont)
plot(contcont)
jobs
jobs %<>% select(treat,job_seek,depress2) #Only kepeing the variables we want.
b <- lm(job_seek ~ treat, data=jobs) # x predicts the mediator
c <- lm(depress2 ~ treat + job_seek, data=jobs) # x and m predict the outcome.
#install.packages("mediation")
library(mediation)
d = jobs %>% select(treat,job_seek,depress2) #Only kepeing the variables we want.
data = jobs %>% select(treat,job_seek,depress2) #Only kepeing the variables we want.
b <- lm(job_seek ~ treat, data) # x predicts the mediator
c <- lm(depress2 ~ treat + job_seek, data) # x and m predict the outcome.
contcont <- mediate(b, # Mediator model
c, # Outcome model
sims=1000, # Number of bootstrap samples
boot = T, # Ask for bootstrapped confidence intervals
treat="treat", # Name of the x variable
mediator="job_seek" # Name of the m variable
)
contcont <- mediate(b, # Mediator model
c, # Outcome model
sims=1000, # Number of bootstrap samples
boot = T, # Ask for bootstrapped confidence intervals
treat="treat", # Name of the x variable
mediator="job_seek" # Name of the m variable
)
summary(contcont)
data = jobs
b <- lm(job_seek ~ treat, data) # x predicts the mediator
c <- lm(depress2 ~ treat + job_seek, data) # x and m predict the outcome.
Model = ' # Outcome Model: y is predicted by x and m
Y ~ c*X + b*M
# Mediator Model: m is predicted by x
# Mediator Model: m is predicted by x
M ~ a*X
# Define parameters
# Define parameters
# indirect effect (a*b)
# Define parameters
# indirect effect (a*b)
ab := a*b
# total effect
# total effect
total := c + (a*b)
'
Model = ' # Outcome Model: y is predicted by x and m
depress2 ~ c*treat + b*job_seek
# Mediator Model: m is predicted by x
# Mediator Model: m is predicted by x
job_seek ~ a*treat
# indirect effect (a*b)
# indirect effect (a*b)
ab := a*b
# total effect
# total effect
total := c + (a*b)
'
sem(Model,jobs)
library(lavaan)
sem(Model,jobs)
Model = sem(Model,jobs)
fit = sem(Model,jobs)
summary(fit)
summary(fit,std=T)
summary(fit,std=T,se="boot")
summary(fit,std=T,se="bootstrap")
fit = sem(Model,jobs,se="bootstrap")
summary(fit,std=T)
confint(fit)
summary(fit,std=T,fitmeasures=T)
summary(fit,std=T,fitMeasures=T)
summary(fit,std=T,FitMeasures=T)
summary(fit,std=T,fitIndices=T)
summary(fit,std=T)
summary(fit,std=T,fitMeasures=T)
summary(fit,std=T,fitmeasures=T)
summary(fit,std=T,fit.measures=T)
summary(fit,std=T,rsquare=T)
semPlot::semPaths(fit)
semPlot::semPaths(fit,whatLabels = "std")
semPlot::semPaths(fit,whatLabels = "std",layout = "tree")
semPlot::semPaths(fit,whatLabels = "std",layout = "tree2")
sempaths
??semPaths
?semPaths
semPlot::semPaths(fit,whatLabels = "std",layout = "circle")
semPlot::semPaths(fit,layout = "circle")
semPlot::semPaths(fit,layout = "spring")
parameterestimates(fit)
parameterestimates(fit,std=T)
parameterestimates(fit)
?parameterestiamtes
?parameterestimates
parameterestimates(fit,standardized = TRUE)
summary(
fit,         # Our model
std=T,       # To get standardized coefficients (betas)
rsquare=T    # To see how much variance is explained in each of the regressions
)
knitr::include_graphics("Picture 5.png")
library(tidyverse)
library(kableExtra)
GradeReport = function(week,report = "Quiz"){
if(report == "Quiz"){report = paste0(".",report)}
if(report == "Reflection"){report = paste0(".Written.",report)}
library(tidyverse);library(stringr)
gr = read.csv("~/Downloads/Grades.csv") %>%
select(SIS.User.ID,Student,starts_with(paste0("Week.",week,report)),Section) %>%
mutate(Section = case_when(str_detect(Section,"Ben")==T ~ "Ben & Tingdan",
str_detect(Section,"Chayce")==T ~ "Chayce",
str_detect(Section,"Danny")==T ~ "Danny",
str_detect(Section,"Tenelle")==T ~ "Tenelle",
TRUE ~ "Error"))
colnames(gr) = c("id","Student","Score","Cohort")
max = max(gr$Score,na.rm=T)
gr = gr %>% mutate(Status = case_when(is.na(Score) ~ "Missing",
Score < max ~ "Not Perfect",
Score == max ~ "Perfect"),
MaxScore = max)
st = read.csv("~/Downloads/Students.csv") %>%
select(Name,Email.Address,Penn.ID)
colnames(st) = c("Name","Mail","id")
dat = left_join(st,gr,by="id")
rep = dat %>% select(Cohort,Student,Mail,Status,Score,MaxScore) %>% filter(Status != "Perfect") %>% arrange(Cohort,Status)
b = rep %>% filter(Cohort=="Ben & Tingdan") %>% pull(Mail)
c = rep %>% filter(Cohort=="Chayce") %>% pull(Mail)
d = rep %>% filter(Cohort=="Danny") %>% pull(Mail)
t = rep %>% filter(Cohort=="Tenelle") %>% pull(Mail)
mails = c(
paste("Ben & Tingdan:",str_c(b,collapse=',')),
paste("Chayce:",str_c(c,collapse=',')),
paste("Danny:",str_c(d,collapse=',')),
paste("Tenelle:",str_c(t,collapse=','))
)
report = list("df" = rep, "mails" = mails)
return(report)
}
write.clip = function(x,sep="\t",col.names=T,...) {
write.table(x
,file = pipe("pbcopy")
,sep=sep
,col.names = col.names
,row.names = F
,quote = F,...)
}
library(kableExtra)
GradeReport = function(week,report = "Quiz"){
if(report == "Quiz"){report = paste0(".",report)}
if(report == "Reflection"){report = paste0(".Written.",report)}
library(tidyverse);library(stringr)
gr = read.csv("~/Downloads/Grades.csv") %>%
select(SIS.User.ID,Student,starts_with(paste0("Week.",week,report)),Section) %>%
mutate(Section = case_when(str_detect(Section,"Ben")==T ~ "Ben & Tingdan",
str_detect(Section,"Chayce")==T ~ "Chayce",
str_detect(Section,"Danny")==T ~ "Danny",
str_detect(Section,"Tenelle")==T ~ "Tenelle",
TRUE ~ "Error"))
colnames(gr) = c("id","Student","Score","Cohort")
max = max(gr$Score,na.rm=T)
gr = gr %>% mutate(Status = case_when(is.na(Score) ~ "Missing",
Score < max ~ "Not Perfect",
Score == max ~ "Perfect"),
MaxScore = max)
st = read.csv("~/Downloads/Students.csv") %>%
select(Name,Email.Address,Penn.ID)
colnames(st) = c("Name","Mail","id")
dat = left_join(st,gr,by="id")
rep = dat %>% select(Cohort,Student,Mail,Status,Score,MaxScore) %>% filter(Status != "Perfect") %>% arrange(Cohort,Status)
b = rep %>% filter(Cohort=="Ben & Tingdan") %>% pull(Mail)
c = rep %>% filter(Cohort=="Chayce") %>% pull(Mail)
d = rep %>% filter(Cohort=="Danny") %>% pull(Mail)
t = rep %>% filter(Cohort=="Tenelle") %>% pull(Mail)
mails = c(
paste("Ben & Tingdan:",str_c(b,collapse=',')),
paste("Chayce:",str_c(c,collapse=',')),
paste("Danny:",str_c(d,collapse=',')),
paste("Tenelle:",str_c(t,collapse=','))
)
report = list("df" = rep, "mails" = mails)
return(report)
}
write.clip = function(x,sep="\t",col.names=T,...) {
write.table(x
,file = pipe("pbcopy")
,sep=sep
,col.names = col.names
,row.names = F
,quote = F,...)
}
week = 10
GradeReport(week,"Quiz")$df
GradeReport(week-1,"Reflection")$df %>% filter(Score == 0)
GradeReport(week-1,"Reflection")$df %>% filter(Score == 0)
GradeReport(week,"Quiz")$df %>% write.clip()
GradeReport(week-1,"Reflection")$df %>% filter(Score == 0) %>% select(Cohort,Student,Mail) %>%  write.clip()
GradeReport(1,"Reflection")
GradeReport(2,"Reflection")
GradeReport(3,"Reflection")
GradeReport(4,"Reflection")
GradeReport(5,"Reflection")
GradeReport(6,"Reflection")
GradeReport(7,"Reflection")
GradeReport(8,"Reflection")
GradeReport(9,"Reflection")
