semPlot::semPaths(fit,layout = "spring")
parameterestimates(fit)
parameterestimates(fit,std=T)
parameterestimates(fit)
?parameterestiamtes
?parameterestimates
parameterestimates(fit,standardized = TRUE)
summary(
fit,         # Our model
std=T,       # To get standardized coefficients (betas)
rsquare=T    # To see how much variance is explained in each of the regressions
)
knitr::include_graphics("Picture 5.png")
library(tidyverse)
library(kableExtra)
GradeReport = function(week,report = "Quiz"){
if(report == "Quiz"){report = paste0(".",report)}
if(report == "Reflection"){report = paste0(".Written.",report)}
library(tidyverse);library(stringr)
gr = read.csv("~/Downloads/Grades.csv") %>%
select(SIS.User.ID,Student,starts_with(paste0("Week.",week,report)),Section) %>%
mutate(Section = case_when(str_detect(Section,"Ben")==T ~ "Ben & Tingdan",
str_detect(Section,"Chayce")==T ~ "Chayce",
str_detect(Section,"Danny")==T ~ "Danny",
str_detect(Section,"Tenelle")==T ~ "Tenelle",
TRUE ~ "Error"))
colnames(gr) = c("id","Student","Score","Cohort")
max = max(gr$Score,na.rm=T)
gr = gr %>% mutate(Status = case_when(is.na(Score) ~ "Missing",
Score < max ~ "Not Perfect",
Score == max ~ "Perfect"),
MaxScore = max)
st = read.csv("~/Downloads/Students.csv") %>%
select(Name,Email.Address,Penn.ID)
colnames(st) = c("Name","Mail","id")
dat = left_join(st,gr,by="id")
rep = dat %>% select(Cohort,Student,Mail,Status,Score,MaxScore) %>% filter(Status != "Perfect") %>% arrange(Cohort,Status)
b = rep %>% filter(Cohort=="Ben & Tingdan") %>% pull(Mail)
c = rep %>% filter(Cohort=="Chayce") %>% pull(Mail)
d = rep %>% filter(Cohort=="Danny") %>% pull(Mail)
t = rep %>% filter(Cohort=="Tenelle") %>% pull(Mail)
mails = c(
paste("Ben & Tingdan:",str_c(b,collapse=',')),
paste("Chayce:",str_c(c,collapse=',')),
paste("Danny:",str_c(d,collapse=',')),
paste("Tenelle:",str_c(t,collapse=','))
)
report = list("df" = rep, "mails" = mails)
return(report)
}
write.clip = function(x,sep="\t",col.names=T,...) {
write.table(x
,file = pipe("pbcopy")
,sep=sep
,col.names = col.names
,row.names = F
,quote = F,...)
}
library(kableExtra)
GradeReport = function(week,report = "Quiz"){
if(report == "Quiz"){report = paste0(".",report)}
if(report == "Reflection"){report = paste0(".Written.",report)}
library(tidyverse);library(stringr)
gr = read.csv("~/Downloads/Grades.csv") %>%
select(SIS.User.ID,Student,starts_with(paste0("Week.",week,report)),Section) %>%
mutate(Section = case_when(str_detect(Section,"Ben")==T ~ "Ben & Tingdan",
str_detect(Section,"Chayce")==T ~ "Chayce",
str_detect(Section,"Danny")==T ~ "Danny",
str_detect(Section,"Tenelle")==T ~ "Tenelle",
TRUE ~ "Error"))
colnames(gr) = c("id","Student","Score","Cohort")
max = max(gr$Score,na.rm=T)
gr = gr %>% mutate(Status = case_when(is.na(Score) ~ "Missing",
Score < max ~ "Not Perfect",
Score == max ~ "Perfect"),
MaxScore = max)
st = read.csv("~/Downloads/Students.csv") %>%
select(Name,Email.Address,Penn.ID)
colnames(st) = c("Name","Mail","id")
dat = left_join(st,gr,by="id")
rep = dat %>% select(Cohort,Student,Mail,Status,Score,MaxScore) %>% filter(Status != "Perfect") %>% arrange(Cohort,Status)
b = rep %>% filter(Cohort=="Ben & Tingdan") %>% pull(Mail)
c = rep %>% filter(Cohort=="Chayce") %>% pull(Mail)
d = rep %>% filter(Cohort=="Danny") %>% pull(Mail)
t = rep %>% filter(Cohort=="Tenelle") %>% pull(Mail)
mails = c(
paste("Ben & Tingdan:",str_c(b,collapse=',')),
paste("Chayce:",str_c(c,collapse=',')),
paste("Danny:",str_c(d,collapse=',')),
paste("Tenelle:",str_c(t,collapse=','))
)
report = list("df" = rep, "mails" = mails)
return(report)
}
write.clip = function(x,sep="\t",col.names=T,...) {
write.table(x
,file = pipe("pbcopy")
,sep=sep
,col.names = col.names
,row.names = F
,quote = F,...)
}
week = 10
GradeReport(week,"Quiz")$df
GradeReport(week-1,"Reflection")$df %>% filter(Score == 0)
GradeReport(week-1,"Reflection")$df %>% filter(Score == 0)
GradeReport(week,"Quiz")$df %>% write.clip()
GradeReport(week-1,"Reflection")$df %>% filter(Score == 0) %>% select(Cohort,Student,Mail) %>%  write.clip()
GradeReport(1,"Reflection")
GradeReport(2,"Reflection")
GradeReport(3,"Reflection")
GradeReport(4,"Reflection")
GradeReport(5,"Reflection")
GradeReport(6,"Reflection")
GradeReport(7,"Reflection")
GradeReport(8,"Reflection")
GradeReport(9,"Reflection")
library(magrittr)
library(tidyverse)
library(ggplot2)
sm <- read.csv("social media.csv")
#install.packages("mediation")
library(mediation)
head(jobs)
data = jobs
b <- lm(job_seek ~ treat, data) # x predicts the mediator
c <- lm(depress2 ~ treat + job_seek, data) # x and m predict the outcome.
#install.packages("lavaan")
library(lavaan)
Model = ' # Outcome Model: y is predicted by x and m
depress2 ~ c*treat + b*job_seek
# Mediator Model: m is predicted by x
job_seek ~ a*treat
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit = sem(
Model,          # Our text model
jobs,           # Our data set
se="bootstrap"  # So we get bootstrapped standard errors
)
summary(
fit,         # Our model
std=T,       # To get standardized coefficients (betas)
rsquare=T    # To see how much variance is explained in each of the regressions
)
sm <- read.csv("social media.csv")
sm
sm_small <-  sm %>%
select(self_set, insta, female)
sm %$% lm(self_est ~ insta + female) %>% summary
sm_small <-  sm %>%
select(self_set, insta, female)
sm %$% lm(self_est ~ insta + female) %>% summary
sm_small <-  sm %>%
select(self_est, insta, female)
library(magrittr)
library(tidyverse)
library(ggplot2)
sm %$% lm(self_est ~ insta + female) %>% summary
sm_small <-  sm %>%
select(self_est, insta, female)
sm %$% lm(self_est ~ insta + female) %>% summary
View(sm)
```{r}
sm <- read.csv("social media.csv")
sm %$% lm(self_est ~ insta + female) %>% summary
sm_small <-  sm %>%
select(self_est, insta, female)
sm <- read.csv("social media.csv")
sm <- sm %>%
mutate(insta_female = insta * female)
sm %$% lm(self_est ~ insta*female) %>% summary
ggplot(sm) +
geom_point(aes(x = insta, y = self_est))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = female))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = female))
sm <- read.csv("social media.csv")
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = female)) +
geom_line(aes(x = insta, y = self_est, color = female))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = female)) +
geom_smooth(aes(x = insta, y = self_est, color = female))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = female)) +
geom_smooth(aes(x = insta, y = self_est),color = female)
?geom_smooth
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = female)) +
geom_smooth(aes(x = insta, y = self_est,colour = female))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = female)) +
geom_smooth(aes(x = insta, y = self_est, colour = as.factor(female)))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = female)) +
geom_smooth(aes(x = insta, y = self_est, color = as.factor(female)))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = as.factor(female))) +
geom_smooth(aes(x = insta, y = self_est, colour = as.factor(female)))
sm <- read.csv("social media.csv")
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = as.factor(female))) +
geom_smooth(aes(x = insta, y = self_est, color = as.factor(female)))
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = as.factor(female))) +
geom_smooth(aes(x = insta, y = self_est, color = as.factor(female)),method = 'lm')
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = as.factor(female))) +
geom_smooth(aes(x = insta, y = self_est, color = as.factor(female)),method = 'lm')+
geom_smooth(aes(x = insta, y = self_est),method = 'lm')+
sm <- read.csv("social media.csv")
sm <- read.csv("social media.csv")
ggplot(sm) +
geom_point(aes(x = insta, y = self_est, color = as.factor(female))) +
geom_smooth(aes(x = insta, y = self_est, color = as.factor(female)),method = 'lm')+
geom_smooth(aes(x = insta, y = self_est),method = 'lm')
sm %>%
ggplot(aes(x = insta, y = self_est, color = factor(female))) +
#you can remove the scatter plot if you choose!
geom_point() +
geom_smooth(method = 'lm',se = FALSE) +
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete( labels = c("Female","Male"))
sm %>%
ggplot(aes(x = insta, y = self_est)) +
#you can remove the scatter plot if you choose!
geom_point() +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
geom_smooth(method = 'lm',se = FALSE)
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete( labels = c("Female","Male"))
sm %>%
ggplot(aes(x = insta, y = self_est)) +
#you can remove the scatter plot if you choose!
geom_point() +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
geom_smooth(method = 'lm',se = FALSE)
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete( labels = c("Female","Male", 'No Interaction'))
sm %>%
ggplot(aes(x = insta, y = self_est)) +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
#geom_smooth(method = 'lm',se = FALSE)
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete( labels = c("Female","Male", 'No Interaction'))
sm %>%
ggplot(aes(x = insta, y = self_est)) +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
geom_smooth(method = 'lm',se = FALSE)
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete( labels = c("Female","Male", 'No Interaction'))
sm %>%
ggplot(aes(x = insta, y = self_est)) +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
geom_smooth(method = 'lm',se = FALSE)
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete( labels = c("Female","Male"))
sm %>%
ggplot(aes(x = insta, y = self_est)) +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete(labels = c("Female","Male"))
sm %>%
ggplot(aes(x = insta, y = self_est)) +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete(labels = c("Female","Male"))+
geom_smooth(method = 'lm',se = FALSE)
sm %>%
ggplot(aes(x = insta, y = self_est)) +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_point() +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete(labels = c("Female","Male"))+
geom_smooth(method = 'lm',se = FALSE)
sm %>%
ggplot(aes(x = insta, y = self_est)) +
geom_point() +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete(labels = c("Female","Male"))+
geom_smooth(method = 'lm',se = FALSE)
sm %>%
ggplot(aes(x = insta, y = self_est)) +
geom_point() +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete(labels = c("Female","Male"))+
geom_smooth(method = 'lm',se = FALSE,color = 'black')
sm %>%
ggplot(aes(x = insta, y = self_est)) +
geom_point() +
#you can remove the scatter plot if you choose!
geom_point(aes(color = factor(female))) +
geom_smooth(aes(color = factor(female)),method = 'lm',se = FALSE) +
labs(
x = 'Instagram Use (in hours)',
y = 'Self-Esteem',
color = 'Gender'
) +
scale_color_discrete(labels = c("Female","Male"))+
geom_smooth(method = 'lm',se = FALSE,color = 'black') +
labs(title='Black line is original regression without an moderation')
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(revealjs)
library(knitr)
library(png)
library(qualtRics)
library(grid)
library(egg)
library(gganimate)
library(stringr)
library(randomNames)
library(grid)
setwd("/Users/benjaminmanning/Desktop/vita_task")
#getting qualtrics data
qualtrics_api_credentials(api_key = "Rty4gbH1cMWehVa7GsJcTg6v5AJ7VA8L8317FBt0",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#After you use this function, reload your environment so you can use the credentials without restarting R.
# (readRenviron("~/.Renviron"))
#
# surveys <- qualtRics::all_surveys()
#View(surveys)
# !vita = qualtRics::fetch_survey(surveyID = surveys$id[11],
#                                           convert = FALSE,
#                                           label = FALSE,
#                                           force_request = TRUE)
d <- randomNames(5, return.complete.data=TRUE)
library(magrittr)
library(tidyverse)
library(qualtRics)
library(lubridate)
library(dplyr)
library(remotes)
#gettin qualtrics data
#Loading all the data from qualtrics and fixing dates
qualtrics_api_credentials(api_key = "Rty4gbH1cMWehVa7GsJcTg6v5AJ7VA8L8317FBt0",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#After you use this function, reload your environment so you can use the credentials without restarting R.
(readRenviron("~/.Renviron"))
surveys <- qualtRics::all_surveys()
qualtrics_api_credentials(api_key = "Rty4gbH1cMWehVa7GsJcTg6v5AJ7VA8L8317FBt0",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#gettin qualtrics data
#Loading all the data from qualtrics and fixing dates
qualtrics_api_credentials(api_key = "Rty4gbH1cMWehVa7GsJcTg6v5AJ7VA8L8317FBt0",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#After you use this function, reload your environment so you can use the credentials without restarting R.
(readRenviron("~/.Renviron"))
surveys <- qualtRics::all_surveys()
library(magrittr)
library(tidyverse)
library(qualtRics)
library(lubridate)
library(dplyr)
library(remotes)
library(gmailr)
#Loading all the data from qualtrics and fixing dates
qualtrics_api_credentials(api_key = "Rty4gbH1cMWehVa7GsJcTg6v5AJ7VA8L8317FBt0",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#After you use this function, reload your environment so you can use the credentials without restarting R.
(readRenviron("~/.Renviron"))
surveys <- qualtRics::all_surveys()
#Loading all the data from qualtrics and fixing dates
qualtrics_api_credentials(api_key = "AXmFZ1HdGvJa66ENUqFFAubcZ050PiUjwqhnSzW",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#After you use this function, reload your environment so you can use the credentials without restarting R.
(readRenviron("~/.Renviron"))
surveys <- qualtRics::all_surveys()
#Loading all the data from qualtrics and fixing dates
qualtrics_api_credentials(api_key = "AXmFZ1HdGvJa66ENUqFFAubcZ050PiUjwqhnSzW",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#After you use this function, reload your environment so you can use the credentials without restarting R.
(readRenviron("~/.Renviron"))
surveys <- qualtRics::all_surveys()
#gettin qualtrics data
#Loading all the data from qualtrics and fixing dates
qualtrics_api_credentials(api_key = "AXmFZ1HdGvJa66ENUqFFAubcZ050PiUjwqhnSzWi",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#After you use this function, reload your environment so you can use the credentials without restarting R.
(readRenviron("~/.Renviron"))
surveys <- qualtRics::all_surveys()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(revealjs)
library(knitr)
library(png)
library(qualtRics)
library(grid)
library(egg)
library(gganimate)
library(stringr)
library(randomNames)
library(grid)
setwd("/Users/benjaminmanning/Desktop/vita_task")
#getting qualtrics data
qualtrics_api_credentials(api_key = "AXmFZ1HdGvJa66ENUqFFAubcZ050PiUjwqhnSzWi",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
#After you use this function, reload your environment so you can use the credentials without restarting R.
# (readRenviron("~/.Renviron"))
#
# surveys <- qualtRics::all_surveys()
#View(surveys)
# !vita = qualtRics::fetch_survey(surveyID = surveys$id[11],
#                                           convert = FALSE,
#                                           label = FALSE,
#                                           force_request = TRUE)
d <- randomNames(5, return.complete.data=TRUE)
#gettin qualtrics data
#Loading all the data from qualtrics and fixing dates
qualtrics_api_credentials(api_key = "AXmFZ1HdGvJa66ENUqFFAubcZ050PiUjwqhnSzWi",
base_url = "iad1.qualtrics.com",
install = TRUE,
overwrite = TRUE
)
surveys <- qualtRics::all_surveys()
?qualtrics_api_credentials
