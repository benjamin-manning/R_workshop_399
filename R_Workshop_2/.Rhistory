select(cyl, am, wt, mpg) %>%
summarise(wt.mean = mean(wt, na.rm = TRUE), mpg.mean = mean(mpg, na.rm = TRUE)) %>%
filter(mpg.mean > 20)
d %<>% mutate(
car_prob_r = 8 - car_prob
)
gen_comp <- function(data, comp, vector){
comp <- enquo(comp)
data %>%
rowwise() %>%
mutate(!!quo_name(comp) := mean(c(!!!vector), na.rm = TRUE)) %>%
ungroup()
}
vector_cqi <- quos(qual_eng, qual_trans, qual_bod, car_prob)
d %<>% gen_comp(comp = cqi, vector = vector_cqi)
var.center <- function(x) {
scale(x, scale = FALSE)
}
d %<>% mutate(
wt_c2 = var.center(wt),
cqi_c2 = var.center(cqi)
)
d %<>% mutate(
mean_wt = mean(wt),
wt_c = wt - mean_wt,
mean_cqi = mean(cqi),
cqi_c = cqi - mean_cqi
)
d %>% select(wt_c, wt_c2, cqi_c, cqi_c2) #Notice that both methods give you the same results
# rescaling, computing the log
d %<>% mutate(
wt_s = wt/1000, #scaling weight down to
lmpg = log(mpg) # creating the log of mpg
)
library(knitr) # for kable() function (creates nice tables)
d %>% filter(wt > 3.5) %>%
group_by(cyl, am) %>%
summarise(mn = mean(mpg))
d %>% select(starts_with("qual")) %>% summary
d %>% select(starts_with("qual")) %>% describe %>% round(., digits = 2) %>% kable
d %>% select(!!!vector_cqi) %>% describe %>% round(., digits = 2) %>% kable
d %>%
rowwise() %>% #rowwise() used to do an operation by rows rather than columns--row means, etc.
mutate(mymean=mean(c(cyl,mpg))) %>%
select(cyl, mpg, mymean)
##Other examples of what we use mutate for in psychology...creating new variables,
d %>% select(!!!vector_cqi) %>% as.matrix() %>% rcorr()
d %<>%
mutate(am = factor(am, labels = c("Auto", "Manual")))
#Other alternative
#d$am = factor(d$am, labels = c("Auto", "Manual"))
head(str(d)) # We use head() to look at only the first few variables of the data set
d %>%
mutate(mpg_cat = case_when(mpg < 17 ~ "Low",
mpg >= 17 & mpg < 24 ~ "Medium",
mpg >= 24 ~ "High"),
mpg_cat = ordered(mpg_cat,levels("Low","Medium","High")))
d
d %>%
mutate(mpg_cat = case_when(mpg < 17 ~ "Low",
mpg >= 17 & mpg < 24 ~ "Medium",
mpg >= 24 ~ "High"),
mpg_cat = ordered(mpg_cat,levels=c("Low","Medium","High")))
head(d)
d %>%
mutate(mpg_cat = case_when(mpg < 17 ~ "Low",
mpg >= 17 & mpg < 24 ~ "Medium",
mpg >= 24 ~ "High"),
mpg_cat = ordered(mpg_cat,levels=c("Low","Medium","High"))) %>% pull(mpg_cat)
d %$% plot(mpg ~ mpg_cat)
d <- read.csv('kv0.csv')
head(d)
str(d)
?gather
vignette("dplyr") # calls helpful vignettes for the dplyr package
# Don't worry about this code being included twice; the Markdown is running one chunk (this one), but not including its output, and not running the other chunk--just showing its code in the output. Notice that in the first line of this chunk it includes the code "include = FALSE", and in the first line of the second chunk it says "eval = FALSE". These commands essentially dictate what I just described.
library(tidyverse)
library(magrittr) # for %<>% pipe
write_csv(mtcars, "mtcars.csv")
d <- read_csv("mtcars.csv")
d1 <- read_csv("carid.csv")
d2 <- read_csv("cqi.csv")
d <- cbind(d, d1, d2)
d$wt <- d$wt*1000
d %<>% select(carID, mpg, everything())
library(tidyverse)
library(magrittr) # for %<>% pipe
write_csv(mtcars, "mtcars.csv")
d <- read_csv("mtcars.csv")
d1 <- read_csv("carid.csv")
d2 <- read_csv("cqi.csv")
d <- cbind(d, d1, d2)
d$wt <- d$wt*1000
d %<>% select(carID, mpg, everything())
# install.packages("tidyverse")
# install.packages("ggplot2")
# install.packages("Hmisc")
# install.packages("psych")
library(psych)
?psych # gives some help for the package; description, etc.
packageDescription("psych") # Shows a description with the information of who created the package, where it is stored in your computer, etc.
help(package = "psych") # among other things, lists each of the functions in the package.
library() # Shows a list of all packages you have in libraries with short description
browseVignettes(package = "psych") # shows you how to use some of the common functions within the package
vignette("dplyr") # calls helpful vignettes for the dplyr package - FYI this iss is not used very often
library(psych)
library(Hmisc)
describe(d$mpg)
detach(package:Hmisc) # unloading packages from your R session
detach(package:psych)
library(Hmisc)
library(psych)
describe(d$mpg)
Hmisc::describe(d$mpg)
psych::describe(d$mpg)
#select(dataset, variable 1, variable 2)
d.new <- select(d, mpg, cyl)
head(d.new)
#filter(dataset, variable == condition)
d.auto <- filter(d, am == 0)
head(d.auto)
mutate(
d,
gear = factor(gear),
mpg_mean = mean(mpg, na.rm = TRUE),
wt_sq = wt^2
)
View(d.new)
mutate(d.new, cyl = 5)
View(d.new)
d %<>% mutate(
lwt = log(wt)
)
d %>% mutate(
lwt = log(wt)
)
d %<>% mutate(
lwt = log(wt)
)
d %>% mutate(
lwt = log(wt)
)
d %<>% mutate(
lwt = log(wt)
)
with(d, plot(mpg ~ wt))
```{r}
d %$% plot(mpg ~ wt)
# Don't worry about this code being included twice; the Markdown is running one chunk (this one), but not including its output, and not running the other chunk--just showing its code in the output. Notice that in the first line of this chunk it includes the code "include = FALSE", and in the first line of the second chunk it says "eval = FALSE". These commands essentially dictate what I just described.
library(tidyverse)
library(magrittr) # for %<>% pipe
write_csv(mtcars, "mtcars.csv")
d <- read_csv("mtcars.csv")
d1 <- read_csv("carid.csv")
d2 <- read_csv("cqi.csv")
d <- cbind(d, d1, d2)
d$wt <- d$wt*1000
d %<>% select(carID, mpg, everything())
# install.packages("tidyverse")
# install.packages("ggplot2")
# install.packages("Hmisc")
# install.packages("psych")
library(psych)
?psych # gives some help for the package; description, etc.
packageDescription("psych") # Shows a description with the information of who created the package, where it is stored in your computer, etc.
help(package = "psych") # among other things, lists each of the functions in the package.
library() # Shows a list of all packages you have in libraries with short description
browseVignettes(package = "psych") # shows you how to use some of the common functions within the package
vignette("dplyr") # calls helpful vignettes for the dplyr package - FYI this iss is not used very often
library(psych)
library(Hmisc)
describe(d$mpg)
detach(package:Hmisc) # unloading packages from your R session
detach(package:psych)
library(Hmisc)
library(psych)
describe(d$mpg)
Hmisc::describe(d$mpg)
psych::describe(d$mpg)
#install.packages("tidyverse", "Hsmisc", "dplyr")
#select(dataset, variable 1, variable 2)
d.new <- select(d, mpg, cyl)
head(d.new)
#filter(dataset, variable == condition)
d.auto <- filter(d, am == 0)
head(d.auto)
mutate(
d,
gear = factor(gear),
mpg_mean = mean(mpg, na.rm = TRUE),
wt_sq = wt^2
)
#summarise(dataset, summary_variable = function(old_variable))
summarise(d, mpg_mean = mean(mpg, na.rm = TRUE))
d2 <-
d %>%
select(mpg, disp, gear) %>%
filter(gear == 4)
d %$% plot(mpg ~ wt)
plot(d$mpg ~ d$wt)
d %>%
group_by(am) %>%
summarise(mean_mpg = mean(mpg, na.rm = T))
#grouping data
grouped_cars <- group_by(d, cyl, am)
#selecting variables
cars_data <- select(grouped_cars, cyl, am, wt, mpg)
#sumamrizing info that we want
summarized_mpg <- summarise(cars_data,
wt.mean = mean(wt, na.rm = TRUE),
mpg.mean = mean(mpg, na.rm = TRUE))
#saving the result with correct filter
final_result <- filter(summarized_mpg, mpg.mean > 20)
#printing~
final_result
#evrything at once
d %>%
group_by(cyl, am) %>%
select(cyl, am, wt, mpg) %>%
summarise(wt.mean = mean(wt, na.rm = TRUE), mpg.mean = mean(mpg, na.rm = TRUE)) %>%
filter(mpg.mean > 20)
#without piping (easier, but messier)
#with piping (harder, but clearer)
d %<>% mutate(
car_prob_r = 8 - car_prob
)
d
## The code for our new function (no need--at this point--to understand this code completely)
gen_comp <- function(data, comp, vector){
comp <- enquo(comp)
data %>%
rowwise() %>%
mutate(!!quo_name(comp) := mean(c(!!!vector), na.rm = TRUE)) %>%
ungroup()
}
## Step 1
vector_cqi <- quos(qual_eng, qual_trans, qual_bod, car_prob)
## Step 2
d %<>% gen_comp(comp = cqi, vector = vector_cqi)
d
## Code for the new function
var.center <- function(x) {
scale(x, scale = FALSE)
}
## example of new function
d %<>% mutate(
wt_c2 = var.center(wt),
cqi_c2 = var.center(cqi)
)
## doing it the old school way
d %<>% mutate(
mean_wt = mean(wt),
wt_c = wt - mean_wt,
mean_cqi = mean(cqi),
cqi_c = cqi - mean_cqi
)
d %>% select(wt_c, wt_c2, cqi_c, cqi_c2) #Notice that both methods give you the same results
# rescaling, computing the log
d %<>% mutate(
wt_s = wt/1000, #scaling weight down to
lmpg = log(mpg) # creating the log of mpg
)
library(knitr) # for kable() function (creates nice tables)
d %>% filter(wt > 3.5) %>%
group_by(cyl, am) %>%
summarise(mn = mean(mpg))
d %>% select(starts_with("qual")) %>% summary
d %>% select(starts_with("qual")) %>% describe %>% round(., digits = 2) %>% kable
d %>% select(!!!vector_cqi) %>% describe %>% round(., digits = 2) %>% kable
d %>%
rowwise() %>% #rowwise() used to do an operation by rows rather than columns--row means, etc.
mutate(mymean=mean(c(cyl,mpg))) %>%
select(cyl, mpg, mymean)
##Other examples of what we use mutate for in psychology...creating new variables,
d %>% select(!!!vector_cqi) %>% as.matrix() %>% rcorr()
## the function factor() converts to a factor and the option labels specifies names to assign to the levels
d %<>%
mutate(am = factor(am, labels = c("Auto", "Manual")))
#Other alternative
#d$am = factor(d$am, labels = c("Auto", "Manual"))
head(str(d)) # We use head() to look at only the first few variables of the data set
d %<>%
mutate(
mpg_cat = case_when(mpg < 17 ~ "Low",
mpg >= 17 & mpg < 24 ~ "Medium",
mpg >= 24 ~ "High"),
mpg_cat = ordered(mpg_cat,levels = c("Low","Medium","High")))
d %$% plot(mpg ~ mpg_cat)
write_rds(d, 'data_clean.rds')
d <- read.csv('kv0.csv')
head(d)
str(d)
dl <- d %>% gather(num,score,-subidr,-attnr)
head(dl)
str(dl)
#Experiment with just using key and value, without additional variables.
d %>% gather(num,score)
dw <- dl %>% spread(num,score)
write_rds(d, 'data_clean.rds')
write_csv(d, 'data_clean.rds')
d <- read.csv('kv0.csv')
d <- read.csv('kv0.csv')
d <- read.csv('kv0.csv')
head(d)
str(d)
head(d)
str(d)
dl <- d %>% gather(num,score,-subidr,-attnr)
head(dl)
str(dl)
#Experiment with just using key and value, without additional variables.
d %>% gather(num,score)
dw <- dl %>% spread(num,score)
d == dw
d, dw
d
dw
library(magrittr)
library(tidyverse)
exp <- read.csv("C:/Users/cbwin/Dropbox (Character Lab)/Resources for learning R/R Workshop 2/experiment.csv", header = TRUE)
exp <- read.csv("~/Dropbox (Character Lab)/Resources for learning R/R Workshop 2/experiment.csv", header = TRUE)
library(magrittr)
library(tidyverse)
exp <- read.csv("~/Desktop/R_workshop_399/R_Workshop_2experiment.csv", header = TRUE)
exp <- read.csv("~/Desktop/R_workshop_399/R_Workshop_2/experiment.csv", header = TRUE)
View(exp)
exp %<>% mutate(
gender = factor(female, levels = c(0, 1), labels = c("Male", "Female")),
con = con - 1,
permin = persec/60
)
exp %<>% select(-c("X"))
exp %<>% mutate(
se3_r = 8 - se3,
se5_r = 8 - se5,
se7_r = 8 - se7
)
var.center <- function(x) {
scale(x, scale = FALSE)
}
exp %<>% mutate(
secat = case_when(secomp > median(secomp) ~ "High",
secomp <= median(secomp) ~ "Low"),
secat_f = factor(secat),
secomp_c = var.center(secomp),
secomp_c_abs = abs(secomp_c)
)
exp %<>% mutate(
secat = case_when(secomp > median(secomp) ~ "High",
secomp <= median(secomp) ~ "Low"),
secat_f = factor(secat),
secomp_c = var.center(secomp),
secomp_c_abs = abs(secomp_c)
)
var.center <- function(x) {
scale(x, scale = FALSE)
}
exp_se <- exp %>% select(id, starts_with("se"))
exp_fem <- exp %>% filter(gender=="Female")
exp %>% group_by(con) %>% summarise(max_abs = max(secomp_c_abs))
exp %<>% mutate(
secat = case_when(secomp > median(secomp) ~ "High",
secomp <= median(secomp) ~ "Low"),
secat_f = factor(secat),
secomp_c = var.center(secomp),
secomp_c_abs = abs(secomp_c)
)
## The code for our new function (no need--at this point--to understand this code completely).You can copy and paste this code whenever you need it. I still use copied and pasted functions found online years ago!
gen_comp <- function(data, comp, vector){
comp <- enquo(comp)
data %>%
rowwise() %>%
mutate(!!quo_name(comp) := mean(c(!!!vector), na.rm = TRUE)) %>%
ungroup()
}
## Step 1
vector_se <- quos(se1, se2, se3_r, se4, se5_r, se6, se7_r, se8)
## Step 2
exp %<>% gen_comp(comp = secomp, vector = vector_se)
var.center <- function(x) {
scale(x, scale = FALSE)
}
exp %<>% mutate(
secat = case_when(secomp > median(secomp) ~ "High",
secomp <= median(secomp) ~ "Low"),
secat_f = factor(secat),
secomp_c = var.center(secomp),
secomp_c_abs = abs(secomp_c)
)
exp_se <- exp %>% select(id, starts_with("se"))
exp_fem <- exp %>% filter(gender=="Female")
exp %>% group_by(con) %>% summarise(max_abs = max(secomp_c_abs))
exp %>% group_by(con, gender) %>% summarise(mean_time = mean(permin, na.rm = TRUE))
exp %>% select(gender,se1:se8) %>% gather(item,response,-gender) %>% group_by(gender,item) %>% summarise(item_mean = mean(response),item_sd = sd(response))
#If you want the recoded items
exp %>% select(gender,se1,se2,se3_r,se4,se5_r,se6,se7_r,se8) %>% gather(item,response,-gender) %>% group_by(gender,item) %>% summarise(item_mean = mean(response),item_sd = sd(response))
exp %$% boxplot(secomp, con)
exp %$% boxplot(permin, secat_f)
setdir <- function(){
wandir <- paste(path.expand("~"), "/Dropbox/_R", sep = "")
wandir <- sub("/Documents", "", wandir)
curdir <- getwd()
if(curdir!=wandir){
setwd(wandir)
}
}
setdir()
library(magrittr) # for pipes
library(Hmisc)
library(tidyverse)
library(haven) # for reading in data
library(magrittr) # for pipes
# write csv
write_csv(mtcars, "mtcars.csv")
# load a csv file
d <- read_csv("mtcars.csv")
d1 <- read_csv("foreign.csv")
# write csv
write_csv(mtcars, "mtcars.csv")
# load a csv file
d <- read_csv("mtcars.csv")
d1 <- read_csv("foreign.csv")
# write csv
write_csv(mtcars, "mtcars.csv")
# load a csv file
d <- read_csv("mtcars.csv")
d1 <- read_csv("foreign.csv")
d <- cbind(d, d1)
d$am <- as.factor(d$am)
ggplot(d)
?geom_smooth
#Makes three scatterplots, one for each gear category.
d %>%
ggplot() +
geom_point(aes(x = mpg, y = wt)) +
facet_wrap(~ gear, nrow = 1)
library(Hmisc)
library(tidyverse)
library(haven) # for reading in data
library(magrittr) # for pipes
# write csv
write_csv(mtcars, "mtcars.csv")
# load a csv file
d <- read_csv("mtcars.csv")
d1 <- read_csv("foreign.csv")
d <- cbind(d, d1)
d$am <- as.factor(d$am)
d$gear = as.factor(d$gear)
d %>%
ggplot() +
geom_bar(aes(x = carb))
d %>%
ggplot() +
geom_histogram(aes(x = hp))
#Makes three scatterplots, one for each gear category.
d %>%
ggplot() +
geom_point(aes(x = mpg, y = wt)) +
facet_wrap(~ gear, nrow = 1)
#Makes six scatterplots, resulting from all the possible combinations of am (2) and cyl (3).
d %>%
ggplot() +
geom_point(aes(x = mpg, y = wt)) +
facet_wrap(am ~ cyl)
#facet_grid organizes the information better when using two variables for faceting.
d %>%
ggplot() +
geom_point(aes(x = mpg, y = wt)) +
facet_grid(am ~ cyl)
d %>%
ggplot() +
geom_point(aes(x = mpg, y = wt)) +
facet_wrap(~ cyl)
d <- read_csv("mtcars.csv")
# Don't worry about this code being included twice; the Markdown is running one chunk (this one), but not including its output, and not running the other chunk--just showing its code in the output. Notice that in the first line of this chunk it includes the code "include = FALSE", and in the first line of the second chunk it says "eval = FALSE". These commands essentially dictate what I just described.
library(tidyverse)
library(magrittr) # for %<>% pipe
write_csv(mtcars, "mtcars.csv")
d <- read_csv("mtcars.csv")
d1 <- read_csv("carid.csv")
d2 <- read_csv("cqi.csv")
d <- cbind(d, d1, d2)
d$wt <- d$wt*1000
d %<>% select(carID, mpg, everything())
library(tidyverse)
library(magrittr) # for %<>% pipe
write_csv(mtcars, "mtcars.csv")
d <- read_csv("mtcars.csv")
d1 <- read_csv("carid.csv")
d2 <- read_csv("cqi.csv")
d <- cbind(d, d1, d2)
d$wt <- d$wt*1000
d %<>% select(carID, mpg, everything())
d <- cbind(d, d1, d2)
library(tidyverse)
library(magrittr) # for %<>% pipe
write_csv(mtcars, "mtcars.csv")
d <- read_csv("mtcars.csv")
d1 <- read_csv("carid.csv")
d2 <- read_csv("cqi.csv")
d <- cbind(d, d1, d2)
d$wt <- d$wt*1000
d %<>% select(carID, mpg, everything())
library(tidyverse)
library(magrittr) # for %<>% pipe
write_csv(mtcars, "mtcars.csv")
d <- read_csv("mtcars.csv")
d1 <- read_csv("carid.csv")
d2 <- read_csv("cqi.csv")
d <- cbind(d, d1, d2)
d$wt <- d$wt*1000
d %<>% select(carID, mpg, everything())
